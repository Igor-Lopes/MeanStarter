{
  "_args": [
    [
      {
        "raw": "mongoose-beautiful-unique-validation@github:igor-lopes/mongoose-beautiful-unique-validation",
        "scope": null,
        "escapedName": "mongoose-beautiful-unique-validation",
        "name": "mongoose-beautiful-unique-validation",
        "rawSpec": "github:igor-lopes/mongoose-beautiful-unique-validation",
        "spec": "github:igor-lopes/mongoose-beautiful-unique-validation",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:igor-lopes/mongoose-beautiful-unique-validation.git",
          "sshUrl": "git+ssh://git@github.com/igor-lopes/mongoose-beautiful-unique-validation.git",
          "httpsUrl": "git+https://github.com/igor-lopes/mongoose-beautiful-unique-validation.git",
          "gitUrl": "git://github.com/igor-lopes/mongoose-beautiful-unique-validation.git",
          "shortcut": "github:igor-lopes/mongoose-beautiful-unique-validation",
          "directUrl": "https://raw.githubusercontent.com/igor-lopes/mongoose-beautiful-unique-validation/master/package.json"
        }
      },
      "/Users/igor/Workspace/MeanStarter"
    ]
  ],
  "_from": "igor-lopes/mongoose-beautiful-unique-validation",
  "_id": "mongoose-beautiful-unique-validation@5.1.1",
  "_inCache": true,
  "_location": "/mongoose-beautiful-unique-validation",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-beautiful-unique-validation@github:igor-lopes/mongoose-beautiful-unique-validation",
    "scope": null,
    "escapedName": "mongoose-beautiful-unique-validation",
    "name": "mongoose-beautiful-unique-validation",
    "rawSpec": "github:igor-lopes/mongoose-beautiful-unique-validation",
    "spec": "github:igor-lopes/mongoose-beautiful-unique-validation",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:igor-lopes/mongoose-beautiful-unique-validation.git",
      "sshUrl": "git+ssh://git@github.com/igor-lopes/mongoose-beautiful-unique-validation.git",
      "httpsUrl": "git+https://github.com/igor-lopes/mongoose-beautiful-unique-validation.git",
      "gitUrl": "git://github.com/igor-lopes/mongoose-beautiful-unique-validation.git",
      "shortcut": "github:igor-lopes/mongoose-beautiful-unique-validation",
      "directUrl": "https://raw.githubusercontent.com/igor-lopes/mongoose-beautiful-unique-validation/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/igor-lopes/mongoose-beautiful-unique-validation.git#cbc190c5d38424a05506ba01e24ad94524589337",
  "_shasum": "2f847b76f0d432de75da5f798b3f4ecf594d3ef3",
  "_shrinkwrap": null,
  "_spec": "mongoose-beautiful-unique-validation@github:igor-lopes/mongoose-beautiful-unique-validation",
  "_where": "/Users/igor/Workspace/MeanStarter",
  "author": {
    "name": "Mattéo Delabre ✏️",
    "email": "contact@matteodelabre.me",
    "url": "https://github.com/matteodelabre"
  },
  "bugs": {
    "url": "https://github.com/matteodelabre/mongoose-beautiful-unique-validation/issues"
  },
  "dependencies": {
    "promise": "^7.1.1"
  },
  "description": "Plugin for Mongoose that turns duplicate errors into regular Mongoose validation errors",
  "devDependencies": {
    "kerberos": "0.0.19",
    "mongoose": "^4.5.9",
    "tap-spec": "^4.1.1",
    "tape": "^4.5.1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "cbc190c5d38424a05506ba01e24ad94524589337",
  "homepage": "https://github.com/matteodelabre/mongoose-beautiful-unique-validation#readme",
  "keywords": [
    "mongoose",
    "plugin",
    "mongodb",
    "error",
    "unique"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "mongoose-beautiful-unique-validation",
  "optionalDependencies": {},
  "peerDependencies": {
    "mongoose": ">=4.5"
  },
  "readme": "# mongoose-beautiful-unique-validation\n\nPlugin for Mongoose that turns duplicate errors into regular Mongoose\nvalidation errors.\n\n[![npm version](https://img.shields.io/npm/v/mongoose-beautiful-unique-validation.svg?style=flat-square)](https://www.npmjs.com/package/mongoose-beautiful-unique-validation)\n[![npm downloads](https://img.shields.io/npm/dm/mongoose-beautiful-unique-validation.svg?style=flat-square)](https://www.npmjs.com/package/mongoose-beautiful-unique-validation)\n[![build status](https://img.shields.io/travis/matteodelabre/mongoose-beautiful-unique-validation.svg?style=flat-square)](https://travis-ci.org/matteodelabre/mongoose-beautiful-unique-validation)\n[![dependencies status](http://img.shields.io/david/matteodelabre/mongoose-beautiful-unique-validation.svg?style=flat-square)](https://david-dm.org/matteodelabre/mongoose-beautiful-unique-validation)\n\nMongoose's unicity constraint actually relies on MongoDB's `unique` indexes.\nIt means that, if you have a schema like this one:\n\n```js\nmongoose.Schema({\n    name: {\n        type: String,\n        unique: true\n    }\n});\n```\n\nDuplicates will be reported with this kind of error:\n\n```json\n{\n    \"name\": \"MongoError\",\n    \"message\": \"insertDocument :: caused by :: 11000 E11000 duplicate key error index: example.users.$name_1 dup key: { : \\\"John\\\" }\",\n    \"index\": 0,\n    \"code\": 11000,\n    \"errmsg\": \"insertDocument :: caused by :: 11000 E11000 duplicate key error index: example.users.$name_1 dup key: { : \\\"John\\\" }\"\n}\n```\n\nThis is not the same kind of error as normal\n[Validation](http://mongoosejs.com/docs/validation.html) errors, so you need\nto handle that as a special case―and special cases allow room for bugs.\nThis plugin solves this problem by turning driver-level duplicate errors\n(E11000 and E11001) into regular Validation errors.\n\n```json\n{\n    \"name\": \"ValidationError\",\n    \"message\": \"Model validation failed\",\n    \"errors\": {\n        \"name\": {\n            \"name\":\"ValidatorError\",\n            \"properties\": {\n                \"type\": \"Duplicate value\",\n                \"message\": \"Custom error message\",\n                \"path\": \"name\",\n                \"value\": \"John\"\n            },\n            \"message\": \"Custom error message\",\n            \"kind\": \"Duplicate value\",\n            \"path\": \"name\",\n            \"value\": \"John\"\n        }\n    }\n}\n```\n\n## Install\n\n```sh\nnpm install --save mongoose-beautiful-unique-validation\n```\n\n### Supported versions of Mongoose\n\nThe 5.0.0 versions of this module only support\nMongoose 4.5.0 and upper.\nIf you need to use previous versions of\nMongoose, use the 4.0.0 versions.\n\n### Supported versions of Node\n\nThe latest version of this module supports Node.js\nversion `6.*`, `5.*`, `4.*`, `0.12.*` and `0.10.*`.\nIf you find a bug while using one of these versions, you can\n[fill a bug report](https://github.com/matteodelabre/mongoose-beautiful-unique-validation/issues/new)\nand we will take care of it as soon as possible!\n\n## Example\n\n### Saving a duplicate document\n\n```js\nlet beautifyUnique = require('mongoose-beautiful-unique-validation');\nlet userSchema = mongoose.Schema({\n    name: {\n        type: String,\n        // this will be the uniqueness error message\n        // leave it to \"true\" to keep the default one:\n        unique: 'Two users cannot share the same username'\n    }\n});\n\n// enables beautifying\nuserSchema.plugin(beautifyUnique);\n\n// let's create two conflicting documents\nlet User = mongoose.model('Model', userSchema);\nlet admin1 = new User({\n    name: 'admin'\n});\n\nlet admin2 = new User({\n    name: 'admin'\n});\n\nadmin1.save()\n    .then(() => console.log('Success saving admin1!'))\n    .catch(err => console.error('admin1 could not be saved: ', err));\n\nadmin2.save()\n    .then(() => console.log('Success saving admin2!'))\n    .catch(err => console.error('admin2 could not be saved: ', err));\n\n// will print:\n// Success saving admin1!\n// admin2 could not be saved: [ValidationError: User validation failed]\n```\n\n### Updating a document to be a duplicate\n\n```js\nlet beautifyUnique = require('mongoose-beautiful-unique-validation');\nlet userSchema = mongoose.Schema({\n    name: {\n        type: String,\n        // this will be the uniqueness error message\n        // leave it to \"true\" to keep the default one:\n        unique: 'Two users cannot share the same username'\n    }\n});\n\n// enables beautifying\nuserSchema.plugin(beautifyUnique);\n\n// let's create two documents\nlet User = mongoose.model('Model', userSchema);\nlet admin1 = new User({\n    name: 'admin1'\n});\n\nlet admin2 = new User({\n    name: 'admin2'\n});\n\n// first, save both documents\nPromise.all([\n    admin1.save(),\n    admin2.save()\n]).then(() => {\n    // try to update admin2 so that it is a duplicate of admin1\n    admin2\n        .update({\n            $set: {name: 'admin1'}\n        })\n        .exec()\n        .then(() => console.log('Success updating admin2!'))\n        .catch(err => console.error('admin2 could not be updated: ', err))\n}).catch(err => console.error('admin1/admin2 could not be saved: ', err));\n\n// will print:\n// admin2 could not be updated: [ValidationError: User validation failed]\n```\n\n## Usage\n\nSchemata that will produce beautified errors need to be plugged\nin with this module using the `.plugin()` method. You can also\nuse it as a [global plugin.](http://mongoosejs.com/docs/plugins.html#global)\n\n**You need to plug in this module after declaring all\nindexes on the schema, otherwise they will not be beautified.**\n\nBy default, the `ValidatorError` message will be\n`Validator failed for path xxx with value xxx`.\nIf you want to override it, add your custom message in the `unique`\nfield (instead of `true`), during the schema's creation.\n\nThe error's `errors` property contain a list of all original\nvalues that made the contraint fail. This property is not\nfilled in when using `findOneAndUpdate`.\n\n## License\n\nReleased under the MIT license.  \n[See the full license text.](https://github.com/matteodelabre/mongoose-beautiful-unique-validation/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/matteodelabre/mongoose-beautiful-unique-validation.git"
  },
  "scripts": {
    "test": "tape tests | tap-spec"
  },
  "version": "5.1.1"
}
